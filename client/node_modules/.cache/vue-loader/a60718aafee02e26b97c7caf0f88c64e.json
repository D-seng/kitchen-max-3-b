{"remainingRequest":"/Users/darrensenger/workspace/current/kitchen-max-3-b/client/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/darrensenger/workspace/current/kitchen-max-3-b/client/src/components/FUpload.vue?vue&type=template&id=51516c87","dependencies":[{"path":"/Users/darrensenger/workspace/current/kitchen-max-3-b/client/src/components/FUpload.vue","mtime":1638507044253},{"path":"/Users/darrensenger/workspace/current/kitchen-max-3-b/client/node_modules/cache-loader/dist/cjs.js","mtime":1638459943317},{"path":"/Users/darrensenger/workspace/current/kitchen-max-3-b/client/node_modules/babel-loader/lib/index.js","mtime":1638459947335},{"path":"/Users/darrensenger/workspace/current/kitchen-max-3-b/client/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1638459950764},{"path":"/Users/darrensenger/workspace/current/kitchen-max-3-b/client/node_modules/cache-loader/dist/cjs.js","mtime":1638459943317},{"path":"/Users/darrensenger/workspace/current/kitchen-max-3-b/client/node_modules/vue-loader-v16/dist/index.js","mtime":1638459949352}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8ZGl2PgogICAgICA8YnV0dG9uIEBjbGljay5wcmV2ZW50PSJvcGVuVXBsb2FkTW9kYWwiPlVwbG9hZCBmaWxlczwvYnV0dG9uPgo8L2Rpdj4K"},{"version":3,"sources":["/Users/darrensenger/workspace/current/kitchen-max-3-b/client/src/components/FUpload.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,CAAC;MACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/darrensenger/workspace/current/kitchen-max-3-b/client/src/components/FUpload.vue","sourceRoot":"","sourcesContent":["<template>\n    <div>\n      <button @click.prevent=\"openUploadModal\">Upload files</button>\n</div>\n</template>\n\n<script>\nexport default {\n  name: \"FUpload\",\n  props: {\n    maxFiles: {\n      type: Number,\n    required: true\n    }\n  },\n  data() {\n    return {\n    photos: [],\n    widget: null,\n    publicId: ''\n    }\n\n  },\n  methods: {\n\n    openUploadModal() {\n// debugger;\n      const presets = [\"signed\", \"video\", \"eager\"];\n      const getMyUploadPresets = (cb) => cb(presets);\n\n      window.cloudinary.setCloudName('dcrqh7va2ct')\n      var widget = window.cloudinary.createUploadWidget(\n        { cloud_name: 'dcrqh7va2ct',\n          upload_preset: 'o6jk8nag',\n          folder: 'webinar',\n          resourceType: 'image',\n          clientAllowedFormats: ['png', 'gif', 'jpeg'],\n          // inlineContainer: document.getElementById('widget-container'),\n          // showCompletedButton: true\n          showAdvancedOptions: true,\n           getUploadPresets: getMyUploadPresets,\n           maxFiles: this.maxFiles,\n          //  tags: ['primary', 'secondary']\n          // preBatch: (cb, data) => {\n          //     console.log('cb')\n          //   console.dir(cb)\n          //   cb({cancel: true})\n          // }\n\n        },\n        (error, result) => {\n          if (!error && result && result.event === \"queues-end\") {\n            // debugger\n            console.log('Done uploading..: ', result.info.files);\n            // debugger\n            const fileCount = result.info.files.length\n            const publicIds = result.info.files.map(file => {\n              return file.uploadInfo.public_id\n            })\n\n            console.log(result.info.public_id)\n            this.$store.dispatch(\"writePublicIds\", { publicIds, maxFiles: this.maxFiles } );\n\n\n            }\n        }).open()\n\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n"]}]}